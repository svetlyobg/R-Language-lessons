#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[age]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2.2]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#return one row and multiple columns
x[3, 1:3]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#return one row and multiple columns
x[3, 1:3]
#return row 3
x[3, ]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#return one row and multiple columns
x[3, 1:3]
#return row 3
x[3, ]
#return col 3
x[ ,3]
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#return one row and multiple columns
x[3, 1:3]
#return row 3
x[3, ]
#return col 3
x[ ,3]
#return var type
class(x["age"])
#More on Data Frames
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
#accessing individual column
x$age
#or...
x[2]
#accessing 2nd row & 2nd column
x[2,2]
#return one row and multiple columns
x[3, 1:3]
#return row 3
x[3, ]
#return col 3
x[ ,3]
#return var type
class(x["age"])
#do this instead
class(x[ ,"age"])
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
#name the elements for easy access
names(svetlyoList) <- c("myAge", "food", "someVector", "bestAt", "myDF")
svetlyoList[["myAge"]]
#Lists
#Lists are cooler than Vectors because
#...vectors can store vars of the same type
#...while Lists can store multiple data types!!!
#Lists can store also DataFames & other lists!!!
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
#name the elements for easy access
names(svetlyoList) <- c("myAge", "food", "someVector", "bestAt", "myDF")
svetlyoList[["myAge"]]
svetlyoList[["myDF"]]$age
#Lists
#Lists are cooler than Vectors because
#...vectors can store vars of the same type
#...while Lists can store multiple data types!!!
#Lists can store also DataFames & other lists!!!
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
#name the elements for easy access
names(svetlyoList) <- c("myAge", "food", "someVector", "bestAt", "myDF")
svetlyoList[["myAge"]]
svetlyoList[["myDF"]]$age
#add new element in the list
length(svetlyoList)
#Lists
#Lists are cooler than Vectors because
#...vectors can store vars of the same type
#...while Lists can store multiple data types!!!
#Lists can store also DataFames & other lists!!!
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
#name the elements for easy access
names(svetlyoList) <- c("myAge", "food", "someVector", "bestAt", "myDF")
svetlyoList[["myAge"]]
svetlyoList[["myDF"]]$age
#return length of the list
length(svetlyoList)
#add new element in the list
svetlyoList[["lastName"]] <- "Kosev"
svetlyoList
length(svetlyoList)
#Lists
#Lists are cooler than Vectors because
#...vectors can store vars of the same type
#...while Lists can store multiple data types!!!
#Lists can store also DataFames & other lists!!!
id <- 1:15
age <- c(18,13,66,32,3,43,54,656,87,323,7,2,9,34,65)
name <- c ("bucky","tom","bobby","henry","emily","baby","hannah","joe","cathy","sandY","lesley","emma","ann","old dan","eric")
x <- data.frame(id, age, name)
svetlyoList <- list(23, "meat", c(1:5), "programming", x)
svetlyoList
#name the elements for easy access
names(svetlyoList) <- c("myAge", "food", "someVector", "bestAt", "myDF")
svetlyoList[["myAge"]]
svetlyoList[["myDF"]]$age
#return length of the list
length(svetlyoList)
#add new element in the list
svetlyoList[["lastName"]] <- "Kosev"
svetlyoList
length(svetlyoList)
svetlyoList$lastName
one <- matrix(1:100, nrow = 10)
one
two <- matrix(51:60, nrow = 2)
three <- matrix(61:70, nrow = 2)
two
three
dim(two)
dim(three)
View(two)
View(three)
View(one)
a <- matrix(c(-1,6,-7,8,-2,2,-3,5,0,1,-2,-1,1,2,1,3), nrow = 4#, ncol = cols#
)
a
a <- matrix(c(-1,6,-7,8,-2,2,-3,5,0,1,-2,-1,1,2,1,3), nrow = 4, ncol = 4)
a
a <- matrix(c(-1,6,-7,8,-2,2,-3,5,0,1,-2,-1,1,2,1,3), nrow = 4, ncol = 4,byrow = true)
a
a <- matrix(c(-1,6,-7,8,-2,2,-3,5,0,1,-2,-1,1,2,1,3), nrow = 4, ncol = 4, byrow = TRUE)
a
a <- matrix(c(-1,6,-7,8,-2,2,-3,5,0,1,-2,-1,1,2,1,3), nrow = 4, ncol = 4, byrow = TRUE)
a
det(a)
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
C <- (A+B)*(A*B)
C
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
A+B
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
sum=A+B
multi=A*B
C <- sum*multi
C
#Matrices
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
sum=A+B
sum
multi=A*B
multi
C <- sum*multi
C
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
sum=A+B
sum
multi=A-B
multi
C <- sum*multi
C
inv <- matrix(C(1,2,3,0,-5,-2,1,-1,2),nrow = 3,ncol = 3,byrow = TRUE)
inv
im <- matrix(C(1,2,3,0,-5,-2,1,-1,2),nrow = 3,ncol = 3,byrow = TRUE)
im
A <- matrix(c(2,1,4,-3,7,6,2,1,0),nrow = 3,ncol = 3,byrow = TRUE)
A
B <- matrix(c(1,-2,3,5,2,-3,4,7,-1),nrow = 3,ncol = 3,byrow = TRUE)
B
im <- matrix(C(1,2,3,0,-5,-2,1,-1,2),nrow = 3,ncol = 3,byrow = TRUE)
solve(im)
D <- matrix(C(1,2,3,0,-5,-2,1,-1,2),nrow = 3,ncol = 3,byrow = TRUE)
solve(D)
D <- matrix(C(1,2,3,0,-5,-2,1,-1,2), nrow = 3, ncol = 3, byrow = TRUE)
solve(D)
#Inverse Matrix
D <- matrix(c(1,2,3,0,-5,-2,1,-1,2), nrow = 3, ncol = 3, byrow = TRUE)
solve(D)
D <- matrix(c(1,2,3,0,-5,-2,1,-1,2), nrow = 3, ncol = 3, byrow = TRUE)
D
D <- matrix(c(1,2,3,0,-5,-2,1,-1,2), nrow = 3, ncol = 3, byrow = TRUE)
D
solve(D)
D
solve(D)
View(two)
View(D)
View(D)
View(A)
View(a)
two*three
two
two <- matrix(51:60, nrow = 2)
three <- matrix(61:70, nrow = 2)
two
three
#return number of rows & cols
dim(two)
dim(three)
#multiplication of matrices
two*three
getwd()
#How to Read CSV Files
getwd()
doc <- read.csv("brUsers", TRUE, ",")
class(doc)
doc <- read.csv("brUsers.csv", TRUE, ",")
class(doc)
doc <- read.csv("brUsers.csv", TRUE, ",")
#ype of file
class(doc)
head(doc)
doc2 <- read.csv("http://samplecsvs.s3.amazonaws.com/Sacramentorealestatetransactions.csv", TRUE, ",")
doc2
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
install.packages("XML")
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
require(XML)
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
require(XML)
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
require(XML)
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 1)
items
require(XML)
#Installing Packages
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp", which = 2)
items
#If error then install XML package
#after installation add the package before all code *require(XML)*
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl)
webpage
install.packages("RCurl")
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl)
webpage
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
#webpage <- getURL(theurl)
theurl
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl)
webpage
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 2)
items
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 1)
items
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 1)
items
require(XML)
library(XML)
#Installing Packages
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 1)
items
library(XML)
require(XML)
#Installing Packages
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 1)
items
install.packages("htmlTable")
library(XML)
require(XML)
#Installing Packages
#read table from internet
items <- readHTMLTable("https://www.w3schools.com/html/html_tables.asp" , which = 1)
items
